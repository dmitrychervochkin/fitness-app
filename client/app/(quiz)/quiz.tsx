import {
    View,
    Text,
    Image,
    Pressable,
    StyleSheet,
    FlatList,
    Dimensions,
    Modal,
} from "react-native";
import { useRef, useState } from "react";
import { MoveRight, X } from "lucide-react-native";
import { COLORS } from "@/constants";
import { Button, Icon } from "@/components";
import { SafeAreaView } from "react-native-safe-area-context";
import { useNavigate } from "@/hooks";

const { width } = Dimensions.get("window");

const SLIDES = [
    {
        img: require("../../assets/images/slide-1.png"),
        title: "üí™ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!",
        description:
            "MAMONT Group ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∞ –ø–æ–ª–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–ø–∞—Ä—Ç–Ω—ë—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –¥–æ–±–∏—Ç—å—Å—è —Ñ–æ—Ä–º—ã –º–µ—á—Ç—ã –±–µ–∑ –ª–∏—à–Ω–µ–π –ø—É—Ç–∞–Ω–∏—Ü—ã –∏ —Å—Ç—Ä–µ—Å—Å–∞.",
    },
    {
        img: require("../../assets/images/slide-2.png"),
        title: "üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ",
        description:
            "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ —Ü–µ–ª—å, –∞ –º—ã –ø–æ–¥–±–µ—Ä—ë–º –ø–æ–Ω—è—Ç–Ω—ã–π –ø–ª–∞–Ω –∑–∞–Ω—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª—å–Ω–æ –≤–ø–∏—à–µ—Ç—Å—è –≤ –≤–∞—à –≥—Ä–∞—Ñ–∏–∫ –∏ –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.",
    },
    {
        img: require("../../assets/images/slide-3.png"),
        title: "‚ö° –í–∏–¥–∏–º—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
        description:
            "–í—Å–µ–≥–æ –ø–∞—Ä—É –Ω–µ–¥–µ–ª—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚Äî –∏ –≤—ã –∑–∞–º–µ—Ç–∏—Ç–µ, –∫–∞–∫ –º–µ–Ω—è–µ—Ç—Å—è —Ç–µ–ª–æ, —É–ª—É—á—à–∞–µ—Ç—Å—è —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è.",
    },
    {
        img: require("../../assets/images/slide-4.png"),
        title: "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —É—Å–ø–µ—Ö–∏",
        description:
            "–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —Ä–µ–∫–æ—Ä–¥—ã –∏ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ, –∫–∞–∫ –∫–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –ª–∏—á–Ω–æ–π —Ü–µ–ª–∏ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.",
    },
    {
        img: require("../../assets/images/slide-5.png"),
        title: "üöÄ –ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å",
        description:
            "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º, –ø–æ–ª–µ–∑–Ω—ã–º —Å–æ–≤–µ—Ç–∞–º –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –¥–æ—Å—Ç–∏—á—å –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.",
    },
];

export default function QuizScreen() {
    const [currentSlide, setCurrentSlide] = useState(0);
    const [isModalVisible, setIsModalVisible] = useState(false);
    const flatListRef = useRef<FlatList>(null);
    const navigation = useNavigate();

    const handleNext = () => {
        if (currentSlide === SLIDES.length - 1) {
            setIsModalVisible(true);
            return;
        }
        const nextIndex =
            currentSlide + 1 < SLIDES.length ? currentSlide + 1 : currentSlide;
        setCurrentSlide(nextIndex);
        flatListRef.current?.scrollToIndex({
            index: nextIndex,
            animated: true,
        });
    };

    const onDotClicked = (index: number) => {
        setCurrentSlide(index);
        flatListRef.current?.scrollToIndex({ index, animated: true });
    };
    const onRegClicked = () => {
        setIsModalVisible(false);
        navigation.navigate("Auth", { type: "register" });
    };
    const onLoginClicked = () => {
        setIsModalVisible(false);
        navigation.navigate("Auth", { type: "login" });
    };
    return (
        <SafeAreaView style={styles.container}>
            <FlatList
                ref={flatListRef}
                data={SLIDES}
                horizontal
                pagingEnabled
                showsHorizontalScrollIndicator={false}
                keyExtractor={(_, i) => i.toString()}
                onMomentumScrollEnd={({ nativeEvent }) => {
                    const slideIndex = Math.round(
                        nativeEvent.contentOffset.x / width
                    );
                    setCurrentSlide(slideIndex);
                }}
                renderItem={({ item }) => (
                    <View style={[styles.slide, { width }]}>
                        <View style={styles.imageContainer}>
                            <Image source={item.img} style={styles.image} />
                        </View>
                    </View>
                )}
            />

            <View style={styles.slideFooter}>
                <View style={{ gap: 30 }}>
                    <Text style={styles.slideTitle}>
                        {SLIDES[currentSlide].title}
                    </Text>
                    <Text style={styles.slideDescription}>
                        {SLIDES[currentSlide].description}
                    </Text>
                </View>
                <View
                    style={{
                        flexDirection: "row",
                        alignItems: "center",
                        justifyContent: "space-between",
                        width: "100%",
                        flex: 1,
                    }}
                >
                    <View style={styles.dotsContainer}>
                        {SLIDES.map((_, index) => (
                            <Pressable
                                key={index}
                                onPress={() => onDotClicked(index)}
                            >
                                <View
                                    style={[
                                        styles.dot,
                                        currentSlide === index &&
                                            styles.activeDot,
                                    ]}
                                />
                            </Pressable>
                        ))}
                    </View>
                    <Pressable onPress={handleNext}>
                        {({ pressed }) =>
                            currentSlide === SLIDES.length - 1 ? (
                                <Text
                                    style={{
                                        fontSize: 30,
                                        fontWeight: "500",
                                        color: pressed
                                            ? COLORS.primary
                                            : COLORS.text,
                                    }}
                                >
                                    –ù–∞—á–∞—Ç—å
                                </Text>
                            ) : (
                                <MoveRight
                                    size={50}
                                    color={
                                        pressed ? COLORS.gray05 : COLORS.text
                                    }
                                />
                            )
                        }
                    </Pressable>
                </View>
            </View>

            <Modal
                animationType="slide"
                transparent={true}
                visible={isModalVisible}
                onRequestClose={() => {
                    setIsModalVisible(!isModalVisible);
                }}
            >
                <View style={styles.modalContainer}>
                    <View style={styles.modalView}>
                        <View style={styles.modalHeader}>
                            <Text style={styles.modalText}>
                                –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
                            </Text>
                            <Icon
                                Icon={X}
                                onPress={() =>
                                    setIsModalVisible(!isModalVisible)
                                }
                            />
                        </View>
                        <Button onPress={onRegClicked}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</Button>
                        <Button btnStyle="outline" onPress={onLoginClicked}>
                            –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
                        </Button>
                        <Text style={styles.description}>
                            –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
                            –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ
                            –Ω–æ–≤—ã–π –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
                        </Text>
                    </View>
                </View>
            </Modal>
        </SafeAreaView>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: COLORS.gray01,
        gap: 20,
    },
    slide: {
        flex: 1,
        alignItems: "center",
    },
    imageContainer: {
        width: "100%",
        height: "100%", // —Ç–µ–ø–µ—Ä—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é –≤—ã—Å–æ—Ç—É —Å–ª–∞–π–¥–∞
        paddingBottom: 200,
        borderRadius: 30,
        overflow: "hidden",
    },

    image: {
        width: "100%",
        height: "100%", // —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ –≤–µ—Å—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        resizeMode: "cover", // —á—Ç–æ–±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω—è–ª–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π
    },
    slideFooter: {
        position: "absolute",
        bottom: 0,
        width: "100%",
        backgroundColor: COLORS.gray02,
        paddingHorizontal: 20,
        paddingVertical: 40,
        borderTopLeftRadius: 20,
        borderTopRightRadius: 20,
        flexDirection: "column",
        alignItems: "flex-end",
        gap: 15,
        minHeight: 320,
        boxShadow: "0 0 100px 5px #3eb942",
    },
    slideTitle: {
        fontSize: 30,
        fontWeight: "600",
        color: COLORS.text,
    },
    slideDescription: {
        fontSize: 17,
        color: COLORS.gray05,
    },
    dotsContainer: {
        flexDirection: "row",
        gap: 12,
        // width: "100%",
        justifyContent: "center",
    },
    dot: {
        width: 15,
        height: 15,
        borderRadius: 15,
        backgroundColor: COLORS.gray04,
    },
    activeDot: { backgroundColor: COLORS.text },

    modalContainer: {
        flex: 1,
        justifyContent: "flex-end",
    },
    modalView: {
        backgroundColor: COLORS.gray02,
        borderRadius: 20,
        padding: 20,
        paddingTop: 30,
        gap: 20,
        height: 400,
        boxShadow: "0 0 100px 100px #393939",
    },
    modalText: {
        fontSize: 30,
        fontWeight: 600,
        color: COLORS.text,
        textAlign: "center",
    },
    modalHeader: {
        flexDirection: "row",
        alignItems: "center",
        justifyContent: "space-between",
        marginBottom: 10,
    },
    description: {
        color: COLORS.gray04,
    },
});
